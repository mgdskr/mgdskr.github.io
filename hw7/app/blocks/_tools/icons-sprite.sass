/*
  SASS variables are information about icon's compiled state, stored under its original file name

  .icon-home
    width: $icon-home-width

  The large array-like variables contain all information about a single icon
  $icon-home: x y offset_x offset_y width height total_width total_height image_path

  At the bottom of this section, we provide information about the spritesheet itself
  $spritesheet: width height image $spritesheet-sprites
  */
$icon-music-name: 'icon_music'
$icon-music-x: 0px
$icon-music-y: 30px
$icon-music-offset-x: 0px
$icon-music-offset-y: -30px
$icon-music-width: 29px
$icon-music-height: 31px
$icon-music-total-width: 33px
$icon-music-total-height: 93px
$icon-music-image: 'icons-sprite.png'
$icon-music: (0px, 30px, 0px, -30px, 29px, 31px, 33px, 93px, 'icons-sprite.png', 'icon_music', )
$icon-voice-name: 'icon_voice'
$icon-voice-x: 0px
$icon-voice-y: 0px
$icon-voice-offset-x: 0px
$icon-voice-offset-y: 0px
$icon-voice-width: 33px
$icon-voice-height: 29px
$icon-voice-total-width: 33px
$icon-voice-total-height: 93px
$icon-voice-image: 'icons-sprite.png'
$icon-voice: (0px, 0px, 0px, 0px, 33px, 29px, 33px, 93px, 'icons-sprite.png', 'icon_voice', )
$icon-wrench-name: 'icon_wrench'
$icon-wrench-x: 0px
$icon-wrench-y: 62px
$icon-wrench-offset-x: 0px
$icon-wrench-offset-y: -62px
$icon-wrench-width: 30px
$icon-wrench-height: 31px
$icon-wrench-total-width: 33px
$icon-wrench-total-height: 93px
$icon-wrench-image: 'icons-sprite.png'
$icon-wrench: (0px, 62px, 0px, -62px, 30px, 31px, 33px, 93px, 'icons-sprite.png', 'icon_wrench', )
$spritesheet-width: 33px
$spritesheet-height: 93px
$spritesheet-image: 'icons-sprite.png'
$spritesheet-sprites: ($icon-music, $icon-voice, $icon-wrench, )
$spritesheet: (33px, 93px, 'icons-sprite.png', $spritesheet-sprites, )

/*
  The provided mixins are intended to be used with the array-like variables

  .icon-home
    @include sprite-width($icon-home)

  .icon-email
    @include sprite($icon-email)

  Example usage in HTML:
    `display: block` sprite:
    <div class="icon-home"></div>

  To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
    // CSS
    .icon {
      display: inline-block;
    }

    // HTML
    <i class="icon icon-home"></i>
  */
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

/*
  The `sprites` mixin generates identical output to the CSS template
    but can be overridden inside of SASS

  @include sprites($spritesheet-sprites)
  */
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
