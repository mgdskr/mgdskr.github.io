"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {

    //object with questions
    var data = {
        "title": "Тест",
        "questions": [{
            "title": "Язык frontend разработки",
            "answerOptions": ["JavaScript", "PHP", "Ruby", "Java"]
        }, {
            "title": "Что такое jQuery",
            "answerOptions": ["фреймворк", "библиотека", "язык программирования"]
        }, {
            "title": "Укажите все менеджеры задач (task-runners)",
            "answerOptions": ["Gulp", "Grunt", "Git"]
        }],
        "submitValue": "Проверить результаты!",
        "rightAnswers": "123"
    };

    ////////////////записываем объект в localStorage/////////////////
    //lets define our storage
    var myStorage = localStorage;
    //add data object to local storage
    myStorage.test = JSON.stringify(data);
    //get data from local storage
    var testData = JSON.parse(myStorage.getItem('test'));

    /////////////////////создаем тест///////////////////////

    var Test = function () {
        //using destructor to get parameters
        function Test(_ref) {
            var _ref$title = _ref.title,
                title = _ref$title === undefined ? 'Test' : _ref$title,
                questions = _ref.questions,
                _ref$submitValue = _ref.submitValue,
                submitValue = _ref$submitValue === undefined ? 'Check results!' : _ref$submitValue,
                rightAnswers = _ref.rightAnswers;

            _classCallCheck(this, Test);

            //write parameters to specie's properties
            this.title = title;
            this.questions = questions;
            this.submitValue = submitValue;
            this.rightAnswers = rightAnswers;
            this.userAnswers = [];
            //reusable DOM elements
            this.body = document.body;
            this.form = '';
            //run all methods
            this.renderTest();
            this.createAnswersEmptyObj();
            this.checkboxHandler();
            this.submitHandler();
        }

        _createClass(Test, [{
            key: "renderTest",
            value: function renderTest() {
                var pageContent = "<h1>" + this.title + "</h1>\n            <form method=\"POST\" action=\"#\">\n                <ol>\n                    " + this.questions.map(function (question, qNum) {
                    return "\n                        <li>\n                            <h2>" + question.title + "</h2>\n                            <ul>\n                                " + question.answerOptions.map(function (option, oNum) {
                        return "\n                                    <li><label><input type = \"checkbox\" name = \"q" + qNum + "\" value = \"o" + oNum + "\">\n                                    <span>" + option + "</span>\n                                    </label></li>";
                    }).join('') + "\n                            </ul>\n                        </li>";
                }).join('') + "\n                </ol>\n                <input type=\"submit\" value=\"" + this.submitValue + "\">\n            </form>";

                //inserting form to our page
                var test = document.createElement('div');
                test.classList.add('test');
                test.innerHTML = pageContent;
                this.body.insertBefore(test, this.body.firstChild);

                //define form to use in other methods
                this.form = test.querySelector('form');
            }

            //поскольку мы не знаем заранее сколько вопросов будет в тесте - создаем массив, а в нем объкты для ответов на каждый вопрос

        }, {
            key: "createAnswersEmptyObj",
            value: function createAnswersEmptyObj() {
                for (var i = 0, max = this.questions.length; i < max; i++) {
                    // вопрос из анкеты
                    var question = this.questions[i];
                    // ответы пользователя в массиве ответов в виде пустого массива
                    this.userAnswers[i] = [];
                    for (var k = 0, _max = question.answerOptions.length; k < _max; k++) {
                        // добавляем в ответ пользователя все опции с флагом false, ипользуем 0 - далее будем при нажатии менять на 1 и обратно при повторном нажатии
                        this.userAnswers[i].push(0);
                    }
                }
            }
        }, {
            key: "checkboxHandler",
            value: function checkboxHandler() {
                var _this = this;

                //ставим хендлер на форму
                this.form.addEventListener('click', function (e) {
                    //ищем чекбоксы
                    if (e.target.tagName === 'INPUT' && e.target.type === "checkbox") {
                        //определяем место, куда записать ответ
                        var answer = _this.userAnswers[e.target.name.slice(1)]; //name = "q[0-9]", обрезаем q
                        //определяем позицию выбранной опции в массиве ответов
                        //записать нужно в конец, для первой опции должны получить не 100, а 001
                        var optionPosition = answer.length - 1 - e.target.value.slice(1); //name = "o[0-9]"
                        //меняем значение 0 на 1 или 1 на 0
                        answer[optionPosition] = answer[optionPosition] === 0 ? 1 : 0;
                        // console.clear();
                        // console.log(this.userAnswers);
                    }
                });
            }
        }, {
            key: "submitHandler",
            value: function submitHandler() {
                var _this2 = this;

                this.form.querySelector('input[type="submit"]').addEventListener('click', function (e) {
                    //определям код ответа - соединяем массив ответов в строку и переводим двоичное представление к 10-чной
                    //если порядок вопросов не меняется - нам все равно сколько опций в каждом вопросе и сколько знаков занимает конкретный код, поэтому просто соединяем в строку и проверям
                    //недостаток - не ясно в каком вопросе неверный ответ
                    var finalAnswerCode = '';
                    for (var i = 0, max = _this2.userAnswers.length; i < max; i++) {
                        var answerCode = parseInt(_this2.userAnswers[i].join(''), 2);
                        finalAnswerCode += answerCode;
                    }

                    _this2.renderModalWindow(finalAnswerCode === _this2.rightAnswers ? 'Вы успешно прошли тест!' : 'Попробуйте еще раз');

                    _this2.resetData();

                    e.preventDefault();
                });
            }
        }, {
            key: "renderModalWindow",
            value: function renderModalWindow(result) {
                var _this3 = this;

                var modalWindow = document.createElement('div');

                modalWindow.classList.add('modal-window');
                modalWindow.innerHTML = "<div class=\"modal-window__inner\">" + result + "<div/>";
                this.body.appendChild(modalWindow);

                // устанавливаем хендлер на закрытие
                modalWindow = document.querySelector('.modal-window');

                modalWindow.addEventListener('click', function (e) {
                    _this3.body.removeChild(modalWindow);
                });
            }
        }, {
            key: "resetData",
            value: function resetData() {
                this.form.querySelectorAll('input[type="checkbox"]').forEach(function (el) {
                    return el.checked = false;
                });
                this.createAnswersEmptyObj();
            }
        }]);

        return Test;
    }();

    var newTest = new Test(data);
})();
"use strict";

function homework1() {

    var base = getNumber("Введите число:");
    var exponent = getNumber("Введите степень:");

    myPow(base, exponent);
}
//functions

function getNumber(userPrompt) {

    var userInput = prompt(userPrompt, "");

    while (isNaN(userInput)) {
        alert("Это не число");
        userInput = prompt(userPrompt, "");
    }

    return userInput;
}

function myPow(base, exponent) {
    var result = 1;

    //checking exponent for being integer
    if (exponent % 1 !== 0) {
        exponent = Math.round(exponent);
        console.log("Функция не рабоает с дробными степенями, степень будет округлена до " + exponent);
    }

    var exponentPositive = exponent > 0 ? exponent : Math.abs(exponent);

    for (var i = 0; i < exponentPositive; i++) {
        result *= base;
    }

    if (exponent < 0) {
        result = 1 / result;
    }

    return result;
}

module.exports = myPow;

// Написать функцию pow, аналогичную Math.pow, которая должна возводить указанное число в указанную степень. Указать число и степень пользователь должен через команду prompt. Результат выполнения функции вывести в консоль. Работать с целыми числами, большими, меньшими, и равными нулю. Бесконечности можно не обрабатывать